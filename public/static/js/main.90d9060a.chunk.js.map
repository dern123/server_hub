{"version":3,"sources":["pages/SearchUsers/SearchUser.js","components/Button/Button.js","pages/User/User.js","route/AppRouter.js","App.js","reportWebVitals.js","index.js"],"names":["SearchUser","setUser","useState","github","setGithub","localStorage","getItem","word","resultSearch","setResultSearch","howMatch","setHowMatch","useEffect","axios","get","then","res","console","log","placeholder","onChange","event","target","value","removeItem","data","setItem","defaultValue","to","onClick","className","src","avatar_url","login","link","repos_url","length","repos","Button","props","type","title","User","user","setRepos","rep","setRep","findRep","setFindRep","check","checked","location","email","created_at","followers","following","href","clone_url","name","forks","stargazers_count","map","item","i","AppRouter","exact","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90d9060a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport {NavLink} from 'react-router-dom'\r\nimport \"./SearchUser.scss\"\r\n\r\nconst SearchUser = ({setUser}) => {\r\n    const [github, setGithub] = useState(null);\r\n    const [word, setWord] = useState(localStorage.getItem('res') || null);\r\n    const [resultSearch, setResultSearch] = useState(null);\r\n    const [howMatch, setHowMatch] = useState(null);\r\n\r\nuseEffect(() => {\r\n    axios.get( 'https://api.github.com/').then(res => setGithub(res))\r\n},[])\r\nconsole.log(\"ðŸš€ ~ file: SearchUser.js ~ line 8 ~ SearchUser ~ github\", github)\r\n\r\n     const searchUsers = () => {\r\n        console.log(\"ðŸš€ ~ file: SearchUser.js ~ line 18 ~ searchUsers ~ word\", word)\r\n        if(word !== null){\r\n              axios.get( `https://api.github.com/users/${word}`).then(res => setResultSearch(res.data))\r\n         } \r\n     }\r\n\r\n     const sendData = () => {\r\n         return (\r\n             setUser(resultSearch)\r\n         )\r\n     }\r\n\r\n     const repos = () => {\r\n    const link = resultSearch.repos_url\r\n        axios.get(link)\r\n        .then(res => setHowMatch(res.data.length));\r\n        \r\n    return howMatch;\r\n     }\r\n    \r\n\r\n    return (\r\n        <section>\r\n            <form>\r\n                <label>\r\n                    <input placeholder=\"Search name user ...\" onChange={(event) => \r\n                    axios.get( `https://api.github.com/users/${event.target.value}`)\r\n                    .then(res => {\r\n                        localStorage.removeItem('res')\r\n                        setResultSearch(res.data)\r\n                        localStorage.setItem('res', event.target.value)\r\n                        })} defaultValue={word !== null ? word : \"\"}/>\r\n                    {/* <Button type=\"button\" title=\"search\" onClick={searchUsers}/> */}\r\n                </label>\r\n            </form>\r\n            <div>\r\n                <ul>\r\n                    { console.log(\"ðŸš€ ~ file: SearchUser.js ~ line 38 ~ SearchUser ~ resultSearch\", resultSearch)\r\n                    \r\n                    }\r\n                    {resultSearch !== null && <NavLink to='/user' onClick={sendData}>\r\n                        <div className=\"find_link_box\">\r\n                            <picture>\r\n                                <img className=\"img_avatar_box\" src={resultSearch.avatar_url}/>\r\n                            </picture>\r\n                        <p>{resultSearch.login} </p>\r\n                         <span> Repo: {repos()}</span>\r\n                        </div>\r\n                        </NavLink>}\r\n                </ul>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n                   \r\n\r\nSearchUser.propTypes = {\r\n\r\n}\r\n\r\nexport default SearchUser\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Button = props => {\r\n    const {type, title, className, onClick} = props;\r\n    return (\r\n        <button type={type} className={className} onClick={onClick} >{title}</button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n\r\n}\r\n\r\nexport default Button\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport Button from '../../components/Button/Button';\r\nimport './User.scss';\r\n\r\nconst User = ({user}) => {\r\n    const [repos, setRepos] = useState(null);\r\n    const [rep, setRep] = useState(null);\r\n    const [findRep, setFindRep] = useState(null);\r\n   \r\nconst check = (checked) => {\r\n        if(checked!==null){\r\n            return checked;\r\n        }\r\n    return \"absent\"\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get( `https://api.github.com/users/${user.login}/repos`).then(res => setRepos(res.data))\r\n    }, []);\r\n\r\nconst searchRepo = () => {\r\n         if(0 === rep.length){\r\n          return  setFindRep(null)\r\n          }\r\n            axios.get( `https://api.github.com/repos/${user.login}/${rep}`)\r\n    .then(res => {  \r\n        console.log(res);\r\n       \r\n        setFindRep(res.data);\r\n        console.log(res.data) ;  \r\n})\r\n\r\n}\r\nconst dataRep = () => {\r\n    let reposDataName = null;\r\n      if(findRep !== null  ){\r\n        reposDataName =  <li  className=\"repos_box\">\r\n    <a  href={findRep.clone_url}>\r\n    <span>{findRep.name}</span> </a>\r\n    <div>\r\n    <p>Fork: {findRep.forks }</p>\r\n    <p>Star: {findRep.stargazers_count}</p>\r\n    </div>\r\n</li>\r\n\r\n    }\r\n    else{reposDataName = repos.map((item, i) => \r\n    <li key={i} className=\"repos_box\">\r\n         <a  href={item.clone_url}>\r\n         <span>{item.name}</span> </a>\r\n         <div>\r\n         <p>Fork: {item.forks }</p>\r\n         <p>Star: {item.stargazers_count}</p>\r\n         </div>\r\n    </li>\r\n    )\r\n    }\r\nreturn reposDataName;\r\n}\r\n\r\n    return (\r\n        <section>\r\n            <div className='header_user'>\r\n            <picture>\r\n                <img src={user.avatar_url}/>\r\n            </picture>\r\n            <div>\r\n                <p>Login: {user.login}</p>\r\n                <p>Location: {check(user.location)}</p>\r\n                <p>Email: {check(user.email)}</p>\r\n                <p>Join Date: {user.created_at}</p>\r\n                <p>{user.followers} Followers</p>\r\n                <p> Following {user.following}</p>\r\n            </div>\r\n            \r\n        </div>\r\n        <form>\r\n        <label>\r\n            <input placeholder=\"Search name repo ...\" onChange={(event) => setRep(event.target.value)}/>\r\n            <Button type=\"button\" title=\"search\" onClick={searchRepo}/>\r\n        </label>\r\n    </form>\r\n    <ul>\r\n        \r\n        {repos!==null&&dataRep()}\r\n    </ul>\r\n    </section>\r\n        \r\n    )\r\n}\r\n\r\nUser.propTypes = {\r\nuser: PropTypes.object.isRequired\r\n}\r\n\r\nexport default User;\r\n","import React, { useState } from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router';\r\n\r\nimport SearchUser from '../pages/SearchUsers/SearchUser'\r\nimport User from '../pages/User/User';\r\n\r\n const AppRouter = () => {\r\n     const [user, setUser] = useState(null);\r\n    return (\r\n        <section>\r\n            <Switch>\r\n                <Redirect exact path=\"/\" to=\"/search\" />\r\n                <Route exact path=\"/search\">\r\n                    <SearchUser setUser={setUser}/>\r\n                </Route>\r\n                <Route exact path=\"/user\">\r\n                    <User user={user}/>\r\n                </Route>\r\n            </Switch>\r\n        </section>\r\n    )\r\n}\r\nexport default AppRouter;\r\n","import React from 'react'\n\nimport './App.scss';\nimport AppRouter from './route/AppRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}